#!/usr/bin/env julia

using OhMyJulia

const table = car(ARGS) ~ eachline ~ map(chomp) ~ map(x->split(x, ',')) ~ groupby(x->x[4], push!, ()->[])
const found = Set{String}()

for file in cdr(ARGS)
    dir      = file ~ splitdir ~ car
    sam_id,  = match(r".*/(.*?)_cfDNA.sh$", file).captures
    line     = open(readlines, file)[2]
    r1, r2   = match(r" -1 (.*?) -2 (.*?) ", line).captures ~ map(String)
    
    if length(r1) != length(r2)
        STDERR << "R1 R2 not match:\n" << r1 << '\n' << r2 << '\n' << "in file: " << file << "\n\n"
        continue
    end
    
    mismatch = r1.data .!= r2.data

    if sum(mismatch) != 1 || car(r1.data[mismatch]) != Byte('1') || car(r2.data[mismatch]) != Byte('2')
        STDERR << "R1 R2 not match:\n" << r1 << '\n' << r2 << '\n' << "in file: " << file << "\n\n"
        continue
    end

    if !haskey(table, sam_id)
        STDERR << "sample id not found in csv: " << file << "\nid is " << sam_id << "\n\n"
        continue
    end

    candidates = table[sam_id]

    i = findfirst(candidates) do c
        contains(r1, c[2]) && contains(r1, c[3])
    end

    if i == 0
        STDERR << "corresponding id not found in csv: " << file << "\n\n"
        continue
    end

    id = candidates[i][1]

    push!(found, id)

    newdir = replace(dir, sam_id, string(sam_id, '_', id))

    try
        run(`mv $dir $newdir`)

        for filename in readdir(newdir)
            newfilename = replace(filename, sam_id, string(sam_id, '_', id))
            run(`mv $newdir/$filename $newdir/$newfilename`)
        end
    catch e
        STDERR << "Error occured when renaming files in " << dir << '\n' << e << '\n'
        continue
    end
end

# for list in values(table), line in list
#     if !(car(line) in found)
#         STDERR << "record not found:" << join(line, "  ") << '\n'
#     end
# end