#!/usr/bin/env julia
using OhMyJulia
using ProgressMeter

sta_dir, sam_dir = rel"../statistic", rel"../processed"

const STATUS = (:Reference, :Germline, :Somatic, :LOH, :Unknown)
const SEQUENCING_ERROR_RATE = .001 # the propobility of snv caused by sequencing error

snvrules = [
    # 仅splicing & exonic非同义突变
    # x -> x[9] ∉ (".", "synonymous SNV"),
    # x -> match(r"(splicing|exonic)", x[6]) != nothing,
    # SSC > 12
    # x -> parse(Int, match(r"SSC=(\d+);", x[end-3])[1]) > 12,
    # read support >= 4
    # x -> parse(Int, split(x[end], ':')[5]) >= 4,
    # AF >= 0.5%
    # x -> parse(Float64, split(x[end], ':')[6][1:end-1]) >= .5,
    # control support <= 3
    # x -> parse(Int, split(x[end-1], ':')[5]) <= 3,
    # AF <= 0.3%
    # x -> parse(Float64, split(x[end-1], ':')[6][1:end-1]) <= .3,
    # Tumor Depth > 150
    # x -> parse(Int, split(x[end], ':')[3]) > 50,
    # Normal Depth > 100
    # x -> parse(Int, split(x[end-1], ':')[3]) > 100,
    # variants in normal pop AF<0.005
    # x -> all(13:17) do i
    #     x[i]=="." || parse(Float64, x[i]) < 0.005
    # end,
    # both + / - have reads
    # x -> all(x->parse(Int, x)>=2, split(split(x[end], ':')[7], ',')[[3,4]]),
    # Tumor FREQ > 5%
    # x -> parse(Float64, split(x[end], ':')[6][1:end-1]) > 5.,
    # overlap >= 1
    x -> begin
        l = split(split(x[end], ':')[end], ',')
        parse(Int, l[7]) + parse(Int, l[10]) > 1
    end
    # special filter: Tumor FREQ < 30%
    # x -> parse(Float64, split(x[end], ':')[6][1:end-1]) < 30.,
    # special filter: in cosmic77
    # x -> x[44] != ".",
    # snv not caused by sequencing error
    # x -> begin
    #     r, v = map(x->parse(Int, x), split(x[end], ':')[[3, 5]])
    #     let p = SEQUENCING_ERROR_RATE
    #         v > max(r * p + 3 * √(r * p * (1 - p)), 1.99)
    #     end
    # end
]

indelrules = [
    # 仅splicing & exonic非同义突变
    # x -> x[9] != ".",
    # x -> match(r"(splicing|exonic)", x[6]) != nothing,
    # SSC > 20
    # x -> parse(Int, match(r"SSC=(\d+);", x[end-3])[1]) > 20,
    # read support >= 4
    # x -> parse(Int, split(x[end], ':')[5]) >= 4,
    # AF >= 0.5%
    # x -> parse(Float64, split(x[end], ':')[6][1:end-1]) >= .5,
    # control support <= 1
    # x -> parse(Int, split(x[end-1], ':')[5]) <= 1,
    # AF <= 0.3%
    # x -> parse(Float64, split(x[end-1], ':')[6][1:end-1]) <= .3,
    # Tumor Depth > 150
    # x -> parse(Int, split(x[end], ':')[3]) > 150,
    # Normal Depth > 100
    # x -> parse(Int, split(x[end-1], ':')[3]) > 100,
    # variants in normal pop AF<0.005
    # x -> all(13:17) do i
    #     x[i]=="." || parse(Float64, x[i]) < 0.005
    # end,
    # special filter: Tumor FREQ < 30%
    # x -> parse(Float64, split(x[end], ':')[6][1:end-1]) < 30.,
    # overlap >= 1
    x -> begin
        l = split(split(x[end], ':')[end], ',')
        parse(Int, l[7]) + parse(Int, l[10]) > 1
    end
]

# meet_rules(m, x) = all(r->r(x), m == :indel ? indelrules : snvrules)

meet_rules(m, x) = findfirst(r->!r(x), m == :indel ? indelrules : snvrules)

S = Vector{Tuple{ASCIIString, Int, Int}}() # file, filtered, output

flog = open("$sta_dir/filter_log.txt", "w")

# @showprogress 1 "filtering..." for i in readdir(sam_dir), s in STATUS, m in (:indel, :snv)
@showprogress 1 "filtering..." for i in readdir(sam_dir), s in (:Somatic,), m in (:indel,)
    lines = open(readlines, "$sam_dir/$i/$(i)_cfdna_$(m)_annovar_$(s)_MrBam.txt")

    Sfiltered, Soutput = 0, 0

    open("$sam_dir/$i/$(i)_cfdna_$(m)_annovar_$(s)_filtered.txt", "w") do fout
        for line in lines
            unmet = meet_rules(m, split(line, '\t'))
            if unmet == 0
                Soutput += 1
                fout << line
            else
                Sfiltered += 1
                flog << unmet << '\t' << line
            end
        end

        push!(S, ("$(i)_$(m)_$(s)", Sfiltered, Soutput))
    end
end

open("$sta_dir/filter_statistics.txt", "w") do fout
    @printf(fout, "%-24s %8s %8s %8s\n", "#Sample", "filtered", "output", "ratio")

    for s in S
        @printf(fout, "%-24s %8s %8s %.2f%%\n", s..., (s[2]*100) / (s[2]+s[3]))
    end

    allfiltered = sum(map(cadr, S))
    alloutput = sum(map(x->x[3], S))
    @printf(fout, "%-24s %8s %8s %.2f%%\n", "#Sum", allfiltered, alloutput, (allfiltered*100) / (allfiltered+alloutput))
end
